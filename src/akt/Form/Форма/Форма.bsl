&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем КлючеваяОперация;

&НаКлиенте
Перем ВремяНачалаОперации;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			КлючеваяОперация, 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Заполняет массив счетами, которые будут использоваться по умолчанию
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы "ТаблицаСчетовПоУмолчанию"
//
&НаСервере
Процедура ЗаполнитьСчетамиПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если ПараметрыДоговора <> Неопределено И ПараметрыДоговора.Ссылка = Договор Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоГруппа,ВалютаВзаиморасчетов,ВидДоговора");
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, РеквизитыДоговора.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить("ВалютаДоговора", РеквизитыДоговора.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить("ВидДоговора", РеквизитыДоговора.ВидДоговора);
		КонецЕсли; 
	Иначе 
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиНаСервере()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	//ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()

	
	ТекущийКонтрагент = Объект.Контрагент;
	Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, "ОсновноеКонтактноеЛицо");
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	
	Объект.ПоДаннымОрганизации.Очистить();
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	//Если ТекущийПериод.ДатаНачала <> Объект.ДатаНачала ИЛИ ТекущийПериод.ДатаОкончания <> КонецДня(Объект.ДатаОкончания) Тогда
	//	
	//	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
	//		
	//		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииПериодаЗавершение", ЭтотОбъект);
	//		Текст = НСтр("ru='При изменении периода сверки табличная часть будет очищена. Изменить период?'");
	//		Режим = РежимДиалогаВопрос.ДаНет;
	//		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета()
		//ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачалаВключая", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Включая)));
	СтруктураПараметров.Вставить("ДатаНачалаИсключая", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Исключая)));
	СтруктураПараметров.Вставить("ДатаОкончания", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, 
			Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая)));
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", ТекущийКонтрагент);
		//СтруктураПараметров.Вставить("Контрагент", Неопределено);
	СтруктураПараметров.Вставить("Валюта", Неопределено);

	ФильтрСписокСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат Истина;
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, 
			Объект.ДоговорКонтрагента));
			
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	
	
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
	
	Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
	
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры


// Заполнение таблицы "По данным организации" по данным бухгалтерского учета
//
&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте()

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	//ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		и НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;	
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента)

	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДатаВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата")
		Иначе
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйДокумент, "Дата,ДоговорКонтрагента");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОПИСАНИЯ ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	
	Объект.ПоДаннымОрганизации.Очистить();
	ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСчетамиПоУмолчанию(Команда)
	
	Если Объект.СписокСчетов.Количество()>0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение", ЭтотОбъект);
		
		Текст = НСтр("ru='Перед заполнением табличная часть <Счета учета расчетов> будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиИРасхождение()

	ОстатокНаКонец = Объект.ОстатокНаНачало 
		+ Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");
	
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент 
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет") - Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Расхождение           = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()

	ТекущаяОрганизация 	 = Объект.Организация;
	ТекущийКонтрагент 	 = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

			ПриИзмененииКонтрагентаСервер();

	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыводитьПолныеНазванияДокументовЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		//УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.ВалютаДокумента=ВалютаРегламентированногоУчета;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючеваяОперация = "ЗаполнениеАктаСверкиВзаиморасчетов";
	ВремяНачалаОперации = Неопределено;
	ЗаполнитьСчетамиПоУмолчаниюНаСервере();

	//ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры



// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Акт.Ссылка КАК АктСверки,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	NULL КАК ДатаК,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	NULL КАК ПредставлениеК,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	0 КАК ДебетК,
	|	0 КАК КредитК,
	|	0 КАК НомерТабЧасти
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ПО Акт.Ссылка = ТЧПоДаннымОрганизации.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	NULL,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит,
	|	1
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|		ПО Акт.Ссылка = ТЧПоДаннымКонтрагента.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктСверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.АктСверки КАК АктСверки,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Документ,
	|	ДанныеДокумента.Представление,
	|	ДанныеДокумента.ДатаК,
	|	ДанныеДокумента.ПредставлениеК,
	|	ДанныеДокумента.Дебет КАК СуммаДогДт,
	|	ДанныеДокумента.Кредит КАК СуммаДогКт,
	|	ДанныеДокумента.ДебетК КАК СуммаДогДтКонтр,
	|	ДанныеДокумента.КредитК КАК СуммаДогКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО ДанныеДокумента.АктСверки = АктСверкиВзаиморасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаДогДт),
	|	СУММА(СуммаДогКт),
	|	СУММА(СуммаДогДтКонтр),
	|	СУММА(СуммаДогКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована)
	|ПО
	|	АктСверки,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктаСверки(ПервыйДокумент)
	ОбъектМетаданных = РеквизитФормыВЗначение("Объект");	
	МассивОбъектов = ЭтотОбъект;
	ОбъектыПечати = Новый СписокЗначений;
	УстановитьПривилегированныйРежим(Истина);
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;

	
	//Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	
	Макет = ОбъектМетаданных.ПолучитьМакет("АктСверки");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	Отбор= Новый Структура("ОтветственноеЛицо, СтруктурнаяЕдиница",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Объект.Организация);
//Руководитель = 

	Объект.ПредставительОрганизации=РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(),Отбор)[0].ФизическоеЛицо;

	Шапка = ОбъектМетаданных;
	
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
		
		//ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области:
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// Заполняем шапку:
		//СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, ТекущаяДата());
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		//СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ТекущийКонтрагент, ТекущаяДата());
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);

		ОписаниеПериода = ?(ЗначениеЗаполнено(ДатаНачалаОтчета),"за период: " + ПредставлениеПериода(НачалоДня( ДатаНачалаОтчета), КонецДня( Шапка.ДатаОкончания), "ФП = Истина"),"");
		
		ТекстЗаголовка = "взаимных расчетов " + ОписаниеПериода  + Символы.ПС
						+ "между " + ПредставлениеОрганизации + Символы.ПС + "и " + ПредставлениеКонтрагента;
		ДоговорКонтрагента = Шапка.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.ЭтоГруппа Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + ДоговорКонтрагента;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДанныеПредставителяОрганизации = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Объект.ПредставительОрганизации, ТекущаяДата());
		ДанныеПредставителяКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ПредставительКонтрагента, "Должность, Фамилия, Имя, Отчество");
		ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия), "",ДанныеПредставителяОрганизации.Фамилия
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя), "", " "+ ДанныеПредставителяОрганизации.Имя)
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество), "", " "+ ДанныеПредставителяОрганизации.Отчество));
		
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, " + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
					"________________", ДанныеПредставителяОрганизации.Должность) + " " + ПредставлениеОрганизации
					+ " " + ?(ФИОПредставителя <> "", ФИОПредставителя, "_______________________") + ", с одной стороны, "
					+ "и " + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента) ИЛИ НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
					"________________", ДанныеПредставителяКонтрагента.Должность)
					+ " " + ПредставлениеКонтрагента + " " + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
					"_______________________", Шапка.ПредставительКонтрагента) + ", с другой стороны, "
					+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Шапка.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		//ОборотыДт = Шапка.Дебет;
		//ОборотыКт = Шапка.Кредит;
		//ОборотыДтКонтр = Шапка.ДебетК;
		//ОборотыКтКонтр = Шапка.КредитК;
		
		ОборотыДт = 0;
		ОборотыКт = 0;
		//ОборотыДтКонтр = 0;
		//ОборотыКтКонтр = 0;
		
		//ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		//Пока ОбходПоДоговорам.Следующий() Цикл
		
		//ТЗ=ОбъектМетаданных.ПоДаннымОрганизации;
		//ТЗДоговоров=ОбъектМетаданных.ПоДаннымОрганизации;
		//ТЗДоговоров.Свернуть("Договор");
		//Для каждого ОбходПоДоговорам Из ТЗДоговоров Цикл
				
			
			
			//Если Шапка.РазбитьПоДоговорам Тогда
			//	//Выводим заголовок с договором
			//	ОбластьДоговор.Параметры.Договор = ОбходПоДоговорам.Договор;
			//	ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
			//	ТабличныйДокумент.Вывести(ОбластьДоговор);
			//	ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			//Иначе
			//	ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			//КонецЕсли;

			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			//Пока ОбходПоДокументам.Следующий() Цикл
			Для каждого ОбходПоДокументам Из ОбъектМетаданных.ПоДаннымОрганизации Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура("ДатаДокумента, РегистраторПредставление, Регистратор, СуммаОборотДт, СуммаОборотКт",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.Документ,ОбходПоДокументам.Дебет,ОбходПоДокументам.Кредит));
				КонецЕсли;
				
				//Если ОбходПоДокументам.ДатаК<>NULL Тогда
				//	СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр",
				//	ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.ДебетК,ОбходПоДокументам.КредитК));
				//КонецЕсли;
			КонецЦикла;
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество() < СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
					//СписокДокументов.Добавить(новый структура("ДатаДокумента,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество() > СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр","","","",""));
				КонецЦикла;
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);
				ОборотыДт=ОборотыДт+ОбластьОбороты.Параметры.СуммаОборотДт;
				ОборотыКт=ОборотыКт+ОбластьОбороты.Параметры.СуммаОборотКт;
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			

		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		//Если Шапка.СверкаСогласована тогда
		//	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
		//	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		//КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ОборотыДт -  ОборотыКт;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);

		НоваяСтрока = Объект.Реестр.Добавить();
		НоваяСтрока.Контрагент = ТекущийКонтрагент;
		НоваяСтрока.СуммаНачальныйОстатокДт = ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт;
		НоваяСтрока.СуммаНачальныйОстатокКт = ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт;
		НоваяСтрока.СуммаОборотДт = ОбластьОборотыИтог.Параметры.СуммаОборотДт;
		НоваяСтрока.СуммаОборотКт = ОбластьОборотыИтог.Параметры.СуммаОборотКт;
		НоваяСтрока.СуммаКонечныйОстатокДт = ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт;
		НоваяСтрока.СуммаКонечныйОстатокКт = ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт;

		//Если Шапка.СверкаСогласована тогда
		//	ОстатокНаКонецК = Шапка.ОстатокНаНачало - ОборотыДтКонтр +  ОборотыКтКонтр;
		//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
		//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		//КонецЕсли;
		
		
	
		// Результаты сверки
		Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
			РезультатыСверки = "<не указана дата сверки>";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
			РезультатыСверки = "<не указан контрагент>";
		Иначе
			РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
									+ Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
									+ Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
			Иначе
				РезультатыСверки = РезультатыСверки + "отсутствует.";
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Шапка.СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + ПредставлениеКонтрагента;
			
			Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
				РезультатыСверки = "<не указана дата сверки>";
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
				РезультатыСверки = "<не указан контрагент>";
			Иначе
				РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
					
				Если ОстатокНаКонец > 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
										+ Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+ " ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
				ИначеЕсли ОстатокНаКонец < 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
										+ Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
				Иначе
					РезультатыСверки = РезультатыСверки + "отсутствует.";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если Шапка.Расхождение <> 0 Тогда
				ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
							+ Формат(?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, "ЧЦ=21; ЧДЦ=2") 
							+ " "+ Строка(Шапка.ВалютаДокумента)
							+ " ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
							?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, Шапка.ВалютаДокумента, Ложь)+")" ;
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки+Символы.ПС+" ";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		
		ОбластьПодвал.Параметры.Должность  = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
			"________________", ДанныеПредставителяОрганизации.Должность);
		ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
			"________________", ДанныеПредставителяКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "("+?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации),
			"_______________________",ДанныеПредставителяОрганизации.Представление)+")";
			
	//ДанныеПредставителяКонтрагента.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
	//	РеквизитыПредставителяКонтрагента.Фамилия,
	//	РеквизитыПредставителяКонтрагента.Имя,
	//	РеквизитыПредставителяКонтрагента.Отчество,
	//	Ложь);			
		ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
			"_______________________",ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеПредставителяКонтрагента.Фамилия, ДанныеПредставителяКонтрагента.Имя, ДанныеПредставителяКонтрагента.Отчество))+")";
		//ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
		//	"_______________________",ОбщегоНазначенияБПВызовСервера.ФамилияИнициалыФизЛица(
		//	ДанныеПредставителяКонтрагента.Фамилия + " " + ДанныеПредставителяКонтрагента.Имя + " " + ДанныеПредставителяКонтрагента.Отчество))+")";
			
			Области = Новый Массив;
			//Области.Добавить(ТабличныйДокумент);
			Области.Добавить(ОбластьКонОстатки);
			Области.Добавить(ОбластьПодвал);
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,Области) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();					
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКонОстатки);
			ТабличныйДокумент.Вывести(ОбластьПодвал);		  


		ТабличныйДокумент.ТолькоПросмотр = Истина;
		//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		//	НомерСтрокиНачало, ОбъектыПечати, Шапка.АктСверки);

	//КонецЦикла; // Пока Шапка.Следующий()

	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Функция ПечатьРеестра(ТабличныйДокумент)
	
	ОбъектМетаданных = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектМетаданных.ПолучитьМакет("АктСверки");
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("ШапкаРеестра");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаРеестра");
	ОбластьИтогов    = Макет.ПолучитьОбласть("ИтогиРеестра");
	
	ОбластьЗаголовок.Параметры.ТекстЗаголовка="Реестр актов за "+ПредставлениеПериода(ОбъектМетаданных.ДатаНачала, КонецДня(ОбъектМетаданных.ДатаОкончания));
	ТекстЗаголовка2="организация: "+ОбъектМетаданных.Организация+"; контрагент:"+ОбъектМетаданных.Контрагент+?(ЗначениеЗаполнено(ОбъектМетаданных.ДоговорКонтрагента), "; договор:"+ОбъектМетаданных.ДоговорКонтрагента, "")+"; счета:";
	Первый=Истина;
	Для каждого ТекущаяСтрока Из ОбъектМетаданных.СписокСчетов Цикл
		ТекстЗаголовка2=ТекстЗаголовка2+?(ТекущаяСтрока.УчаствуетВРасчетах, ?(Первый, "", ", ")+ТекущаяСтрока.Счет, "");
		Первый=?(ТекущаяСтрока.УчаствуетВРасчетах, Ложь, Первый);
	КонецЦикла;
	
	ОбластьЗаголовок.Параметры.ТекстЗаголовка2=ТекстЗаголовка2;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Для каждого ТекущаяСтрока из Объект.Реестр.Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ТекущаяСтрока);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	ОбластьИтогов.Параметры.СуммаНачальныйОстатокДт=Объект.Реестр.Итог("СуммаНачальныйОстатокДт");
	ОбластьИтогов.Параметры.СуммаНачальныйОстатокКт=Объект.Реестр.Итог("СуммаНачальныйОстатокКт");
	ОбластьИтогов.Параметры.СуммаОборотДт=Объект.Реестр.Итог("СуммаОборотДт");
	ОбластьИтогов.Параметры.СуммаОборотКт=Объект.Реестр.Итог("СуммаОборотКт");
	ОбластьИтогов.Параметры.СуммаКонечныйОстатокДт=Объект.Реестр.Итог("СуммаКонечныйОстатокДт");
	ОбластьИтогов.Параметры.СуммаКонечныйОстатокКт=Объект.Реестр.Итог("СуммаКонечныйОстатокКт");
	ТабличныйДокумент.Вывести(ОбластьИтогов);
	
	Объект.Реестр.Очистить();
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура Сформировать(Команда)
	СписокКонтрагентов=ПолучитьСписокКонтрагентов();
	ТабличныйДокумент=Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб				= Истина;
	ТабличныйДокумент.РазмерКолонтитулаСверху	= 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабличныйДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати		= "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	ПервыйДокумент = Истина;

	НомерЭлементаСписка=1;
	Для каждого КонтрагентСЗ из СписокКонтрагентов Цикл
		ТекущийКонтрагент=КонтрагентСЗ.Значение;
		Объект.ПоДаннымОрганизации.Очистить();
		//ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
		ЗаполнитьПоДаннымБухгалтерскогоУчета();
		Если Объект.ПоДаннымОрганизации.Количество() ИЛИ Объект.ОстатокНаНачало ИЛИ БезПустых=Ложь  Тогда
			ТабличныйДокументРезультат=ПечатьАктаСверки(ПервыйДокумент);
			ПервыйДокумент = Ложь;
		КонецЕсли;
		Если СписокКонтрагентов.Количество()<>1 Тогда
			Состояние("Формирую акты ", НомерЭлементаСписка/СписокКонтрагентов.Количество()*100);
		КонецЕсли;
		НомерЭлементаСписка=НомерЭлементаСписка+1;
	КонецЦикла;
	Если Объект.флВыводитьРеестр Тогда
		ТабличныйДокументРезультат=ПечатьРеестра(ТабличныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтрагентов()
	СписокКонтрагентов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если Объект.Контрагент.ЭтоГруппа Тогда
			КонтрагентыВыборка=Справочники.Контрагенты.ВыбратьИерархически(Объект.Контрагент,,,"Наименование Возр"); 
			Пока КонтрагентыВыборка.Следующий() Цикл
				Если не КонтрагентыВыборка.ЭтоГруппа Тогда
					СписокКонтрагентов.Добавить(КонтрагентыВыборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокКонтрагентов.Добавить(Объект.Контрагент);
		КонецЕсли;
	Иначе
		Сообщить("не выбран контрагент");
	КонецЕсли;
	СписокКонтрагентов.СортироватьПоЗначению();
	Возврат СписокКонтрагентов;
КонецФункции



Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли; 
	
    Возврат МетаданныеДокумента;
	
КонецФункции
	

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала",         СтруктураПараметров.ДатаНачалаВключая);
	Запрос.УстановитьПараметр("ДатаОкончания",      СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",        СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Контрагент",         СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("Валюта",             СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",  СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговораКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)
	|	И &ДоговорКонтрагента <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПоДаннымОрганизации = Новый ТаблицаЗначений;
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Договор",       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Документ",      Документы.ТипВсеСсылки());
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Дебет",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Кредит",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Валюта",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	КэшМетаданных = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Договор            = Выборка.Договор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;

		Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
			//Если Истина Тогда
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " №" + Символы.НПП + Выборка.Номер;
			Иначе
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " (" + 
					?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), "_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '",
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли;	
		Иначе
			
			// Сформируем строку представления
			Представление = "";
			
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
					
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Представление = "Курсовые разницы";
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
					Представление = "Санкции";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы") Тогда
					Представление = "Суммовые разницы";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ") Тогда
					Представление = "Курсовые разницы по расчетам в у.е.";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				
				Если Выборка.Дебет > 0 Тогда
					Представление = "Возврат займа";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Займ";
				Иначе
					Представление = "Операции по займам";
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
				
				Представление = "Претензия";
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
				
				Если (Выборка.Кредит >0) Тогда
					
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = "Возврат средств";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Оплата";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
						
						Представление = "Оплата";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Возврат средств";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				Представление = "Корректировка прихода";
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Представление = "Корректировка продажи";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				И НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли (БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
				И (Выборка.Кредит <> 0) Тогда
				Представление = "Приход";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				ИначеЕсли (Выборка.Кредит <> 0) Тогда
					Представление = "Оплата";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				Если Представление = "Продажа" И ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Представление = Представление + " (" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Ложь) 
						+ " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			//ИначеЕсли (Выборка.НомерВходящегоДокумента = "" И Представление = "Оплата") 
			//	ИЛИ (Выборка.НомерВходящегоДокумента = "" И Представление = "Перевод сред") 
			//	Или  Найти(Представление, "разницы") > 0 Тогда
			//	Представление = Представление + " (" + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy")+")";
			ИначеЕсли Выборка.НомерВходящегоДокумента = "" Или  Найти(Представление, "разницы") > 0 Тогда
				//Представление = Представление + " (" + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy")+")";
				Представление = Представление + " (" + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy")+")";
			Иначе
				Представление = Представление + " (" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '", 
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;					  
			
			//НоваяСтрока.Представление = Представление +Символы.ПС+ МетаданныеДокумента+" ";
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала", СтруктураПараметров.ДатаНачалаИсключая);
	
	Запрос.Текст = 
	?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаНачалаИсключая), 
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец", 
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало,
	|	0 КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало");
	
	Запрос.Текст = Запрос.Текст + 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(ОстатокНаКонец)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", Выборка.ОстатокНаНачало);
	ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	Если СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета 
		И НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов  Тогда
		
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор,Валюта", "Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из ТаблицаПоДаннымОрганизации Цикл
			Если СтрокаДвижений.ВалютнаяСумма >0 Тогда
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 Тогда
				Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
	
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");	
	КонецЕсли; 
	
	Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда	
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");
	КонецЕсли;

	Если СтруктураПараметров.РазбитьПоДоговорам Тогда
		ТаблицаПоДаннымОрганизации.Сортировать("Договор, Дата, Документ, Представление", Новый СравнениеЗначений);
	Иначе
		ТаблицаПоДаннымОрганизации.Сортировать("Дата, Документ, Представление, Договор", Новый СравнениеЗначений);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры
