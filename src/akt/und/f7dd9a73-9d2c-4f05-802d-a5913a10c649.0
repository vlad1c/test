{3,
{42,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{309,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПериода",
{1,1,
{"ru","Группа периода"}
},
{1,1,
{"ru","Группа периода"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДатаНачала",1,0,
{1,1,
{"ru","Период"}
},
{1,0},
{2,
{1},
{0,b3fd0578-463c-4919-ab45-52598835953b}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДатаНачалаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДатаНачалаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{144,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДатаНачалаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{206,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДекорацияНадписьПо",
{1,1,
{"ru","—"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,1,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{207,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДекорацияНадписьПоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","—"}
},0},0,1,
{10,
{208,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДекорацияНадписьПоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДатаОкончания",0,0,
{1,0},
{1,0},
{2,
{1},
{0,c7a76933-4fa7-4d32-9c50-46f2ebf89e94}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДатаОкончанияПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДатаОкончанияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{145,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДатаОкончанияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{209,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ВыбратьПериод",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-1},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{210,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ВыбратьПериодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{306,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Организация",1,0,
{1,0},
{1,0},
{2,
{1},
{0,746ffaaa-4080-4bab-8ad5-4c9f6454aec3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{307,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ОрганизацияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{308,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОрганизацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{310,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаПериодаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{304,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКонтрагента",
{1,1,
{"ru","Группа контрагента"}
},
{1,1,
{"ru","Группа контрагента"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Контрагент",1,0,
{1,0},
{1,0},
{2,
{1},
{0,9540c435-3814-433e-8f19-4df3090dd0db}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"КонтрагентПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{11,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"КонтрагентКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{140,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КонтрагентExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{301,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДоговорКонтрагента",1,0,
{1,0},
{1,0},
{2,
{1},
{0,d16c4da4-aeb7-400b-b4e9-924b2f3fa060}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{302,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДоговорКонтрагентаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{303,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДоговорКонтрагентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{305,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКонтрагентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{314,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаСформировать",
{1,1,
{"ru","Группа сформировать"}
},
{1,1,
{"ru","Группа сформировать"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{266,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ФормаПечатьАкта",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{267,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаПечатьАктаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{311,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"БезПустых",1,0,
{1,1,
{"ru","без пустых"}
},
{1,0},
{1,
{18}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},2,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{312,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БезПустыхКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{313,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БезПустыхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{346,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"флВыводитьРеестр",4,0,
{1,1,
{"ru","выводить реестр"}
},
{1,0},
{2,
{1},
{0,7dcf8a37-8a6b-47b1-bd76-56a3854287a2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},1,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{347,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"флВыводитьРеестрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{348,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"флВыводитьРеестрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{315,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаСформироватьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{344,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"Группа1",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{298,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ТабличныйДокументРезультат",0,0,
{1,0},
{1,0},
{1,
{16}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{9,50,10,1,1,0,0,1,1,0,0,1,0,0,1,
{3,4,
{0}
},1,1,
{0,1,0},0,1,0,0,1,0},
{0,1,0},1,
{21,
{299,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ТабличныйДокументРезультатКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{300,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ТабличныйДокументРезультатРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},143c00f7-a42d-4cd7-9189-88e4467dc768,
{50,
{316,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,1,
{0,
{0,
{"B",1},0}
},"СписокСчетов",0,0,1,
{1,0},
{1,0},
{2,
{1},
{0,5c42aa21-4dc6-49b6-8f17-e7659168ccfd}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{0,1,0},
{0},1,
{21,
{317,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{318,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"СписокСчетовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{338,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СписокСчетовСчет",1,0,
{1,0},
{1,0},
{3,
{1},
{0,5c42aa21-4dc6-49b6-8f17-e7659168ccfd},
{0,4fbef52d-2a30-4baa-9d6e-3485978959d4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{339,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовСчетКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{340,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовСчетРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{341,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СписокСчетовУчаствуетВРасчетах",1,0,
{1,0},
{1,0},
{3,
{1},
{0,5c42aa21-4dc6-49b6-8f17-e7659168ccfd},
{0,3cf545e4-ba7c-4e53-bc1f-cd6590485f6a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{342,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовУчаствуетВРасчетахКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{343,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовУчаствуетВРасчетахРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{10,
{319,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,0,0,1,
{4,
{320,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{21,
{323,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{324,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{316,0},0,3,3},1,
{4,
{325,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"СписокСчетовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{21,
{328,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{329,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{316,1},0,3,3},1,
{4,
{330,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СписокСчетовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{21,
{333,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокСчетовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{334,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокСчетовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{316,2},0,3,3},0,1,0,0,1,0,3,3,0},1,0,1,
{10,
{345,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем КлючеваяОперация;

&НаКлиенте
Перем ВремяНачалаОперации;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			КлючеваяОперация, 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Заполняет массив счетами, которые будут использоваться по умолчанию
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы ""ТаблицаСчетовПоУмолчанию""
//
&НаСервере
Процедура ЗаполнитьСчетамиПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = ""Счет"";
	ТаблицаСчетов.Колонки.Добавить(""УчаствуетВРасчетах"");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, ""УчаствуетВРасчетах"");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если ПараметрыДоговора <> Неопределено И ПараметрыДоговора.Ссылка = Договор Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ""ЭтоГруппа,ВалютаВзаиморасчетов,ВидДоговора"");
		ПараметрыДоговора = Новый Структура(""Ссылка, ЭтоГруппа"", Договор, РеквизитыДоговора.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить(""ВалютаДоговора"", РеквизитыДоговора.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить(""ВидДоговора"", РеквизитыДоговора.ВидДоговора);
		КонецЕсли; 
	Иначе 
		ПараметрыДоговора = Новый Структура(""Ссылка, ЭтоГруппа"", Договор, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиНаСервере()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог(""Дебет"") -  Объект.ПоДаннымОрганизации.Итог(""Кредит"");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	//ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог(""Дебет"") -  Объект.ПоДаннымКонтрагента.Итог(""Кредит"");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()

	
	ТекущийКонтрагент = Объект.Контрагент;
	Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, ""ОсновноеКонтактноеЛицо"");
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	
	Объект.ПоДаннымОрганизации.Очистить();
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	//Если ТекущийПериод.ДатаНачала <> Объект.ДатаНачала ИЛИ ТекущийПериод.ДатаОкончания <> КонецДня(Объект.ДатаОкончания) Тогда
	//	
	//	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
	//		
	//		ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросПриИзмененииПериодаЗавершение"", ЭтотОбъект);
	//		Текст = НСтр(""ru='При изменении периода сверки табличная часть будет очищена. Изменить период?'"");
	//		Режим = РежимДиалогаВопрос.ДаНет;
	//		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

// Заполнение таблицы ""По данным организации"" по информации из бухгалтерского учета
&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета()
		//ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить(""ДатаНачалаВключая"", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Включая)));
	СтруктураПараметров.Вставить(""ДатаНачалаИсключая"", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Исключая)));
	СтруктураПараметров.Вставить(""ДатаОкончания"", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, 
			Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая)));
	СтруктураПараметров.Вставить(""Организация"", Объект.Организация);
	СтруктураПараметров.Вставить(""Контрагент"", ТекущийКонтрагент);
		//СтруктураПараметров.Вставить(""Контрагент"", Неопределено);
	СтруктураПараметров.Вставить(""Валюта"", Неопределено);

	ФильтрСписокСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр(""ru='Не задан список счетов, по которым производится сверка.'"");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , ""Объект.СписокСчетов"");
		Возврат Истина;
	КонецЕсли;
		
	СтруктураПараметров.Вставить(""ФильтрСписокСчетов"", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить(""АналитикаРасчетов"", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить(""ДоговорКонтрагента"", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, 
			Объект.ДоговорКонтрагента));
			
	СтруктураПараметров.Вставить(""ВыводитьПолныеНазванияДокументов"", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить(""ВалютаДокумента"", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить(""РазбитьПоДоговорам"", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить(""ВалютаРегламентированногоУчета"", ВалютаРегламентированногоУчета);
	
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	Результат = Новый Структура(""ЗаданиеВыполнено"", Истина);
	
	
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
	
	Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
	
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры


// Заполнение таблицы ""По данным организации"" по данным бухгалтерского учета
//
&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте()

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	//ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета();
	
	Если ТипЗнч(Результат) = Тип(""Структура"") 
		и НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(""Подключаемый_ПроверитьВыполнениеЗадания"", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;	
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента)

	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти(""ДоговорКонтрагента"") = Неопределено Тогда
			ДатаВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, ""Дата"")
		Иначе
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйДокумент, ""Дата,ДоговорКонтрагента"");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОПИСАНИЯ ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	
	Объект.ПоДаннымОрганизации.Очистить();
	ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСчетамиПоУмолчанию(Команда)
	
	Если Объект.СписокСчетов.Количество()>0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение"", ЭтотОбъект);
		
		Текст = НСтр(""ru='Перед заполнением табличная часть <Счета учета расчетов> будет очищена. Заполнить?'"");
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиИРасхождение()

	ОстатокНаКонец = Объект.ОстатокНаНачало 
		+ Объект.ПоДаннымОрганизации.Итог(""Дебет"") - Объект.ПоДаннымОрганизации.Итог(""Кредит"");
	
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент 
		+ Объект.ПоДаннымКонтрагента.Итог(""Дебет"") - Объект.ПоДаннымКонтрагента.Итог(""Кредит"");
	
	Расхождение           = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()

	ТекущаяОрганизация 	 = Объект.Организация;
	ТекущийКонтрагент 	 = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура(""НачалоПериода, КонецПериода"", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения(""ВыбратьПериодЗавершение"", ЭтотОбъект);
	ОткрытьФорму(""ОбщаяФорма.ВыборСтандартногоПериода"", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

			ПриИзмененииКонтрагентаСервер();

	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросВыводитьПолныеНазванияДокументовЗавершение"", ЭтотОбъект);
		Текст = НСтр(""ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?'"");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		//УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.ВалютаДокумента=ВалютаРегламентированногоУчета;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючеваяОперация = ""ЗаполнениеАктаСверкиВзаиморасчетов"";
	ВремяНачалаОперации = Неопределено;
	ЗаполнитьСчетамиПоУмолчаниюНаСервере();

	//ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				""Подключаемый_ПроверитьВыполнениеЗадания"", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры



// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	Акт.Ссылка КАК АктСверки,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	NULL КАК ДатаК,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	NULL КАК ПредставлениеК,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	0 КАК ДебетК,
	|	0 КАК КредитК,
	|	0 КАК НомерТабЧасти
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ПО Акт.Ссылка = ТЧПоДаннымОрганизации.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	NULL,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит,
	|	1
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|		ПО Акт.Ссылка = ТЧПоДаннымКонтрагента.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктСверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.АктСверки КАК АктСверки,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Документ,
	|	ДанныеДокумента.Представление,
	|	ДанныеДокумента.ДатаК,
	|	ДанныеДокумента.ПредставлениеК,
	|	ДанныеДокумента.Дебет КАК СуммаДогДт,
	|	ДанныеДокумента.Кредит КАК СуммаДогКт,
	|	ДанныеДокумента.ДебетК КАК СуммаДогДтКонтр,
	|	ДанныеДокумента.КредитК КАК СуммаДогКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО ДанныеДокумента.АктСверки = АктСверкиВзаиморасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаДогДт),
	|	СУММА(СуммаДогКт),
	|	СУММА(СуммаДогДтКонтр),
	|	СУММА(СуммаДогКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована)
	|ПО
	|	АктСверки,
	|	Договор"";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктаСверки(ПервыйДокумент)
	ОбъектМетаданных = РеквизитФормыВЗначение(""Объект"");	
	МассивОбъектов = ЭтотОбъект;
	ОбъектыПечати = Новый СписокЗначений;
	УстановитьПривилегированныйРежим(Истина);
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;

	
	//Макет = УправлениеПечатью.МакетПечатнойФормы(""Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки"");
	
	Макет = ОбъектМетаданных.ПолучитьМакет(""АктСверки"");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр(""МассивДокументов"", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	Отбор= Новый Структура(""ОтветственноеЛицо, СтруктурнаяЕдиница"",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Объект.Организация);
//Руководитель = 

	Объект.ПредставительОрганизации=РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(),Отбор)[0].ФизическоеЛицо;

	Шапка = ОбъектМетаданных;
	
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
		
		//ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области:
		ОбластьЗаголовок    = Макет.ПолучитьОбласть(""Заголовок"");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(""ШапкаТаблицы"");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть(""НачОстатки"");
		ОбластьДоговор      = Макет.ПолучитьОбласть(""Договор"");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть(""ДоговорИтоги"");
		ОбластьОбороты      = Макет.ПолучитьОбласть(""Обороты"");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть(""ОборотыИтог"");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть(""КонОстатки"");
		ОбластьПодвал       = Макет.ПолучитьОбласть(""Подвал"");
		
		// Заполняем шапку:
		//СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, ТекущаяДата());
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, ""НаименованиеДляПечатныхФорм,"");
		
		//СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ТекущийКонтрагент, ТекущаяДата());
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, ""НаименованиеДляПечатныхФорм,"");
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);

		ОписаниеПериода = ?(ЗначениеЗаполнено(ДатаНачалаОтчета),""за период: "" + ПредставлениеПериода(НачалоДня( ДатаНачалаОтчета), КонецДня( Шапка.ДатаОкончания), ""ФП = Истина""),"""");
		
		ТекстЗаголовка = ""взаимных расчетов "" + ОписаниеПериода  + Символы.ПС
						+ ""между "" + ПредставлениеОрганизации + Символы.ПС + ""и "" + ПредставлениеКонтрагента;
		ДоговорКонтрагента = Шапка.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.ЭтоГруппа Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + ""по договору "" + ДоговорКонтрагента;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДанныеПредставителяОрганизации = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Объект.ПредставительОрганизации, ТекущаяДата());
		ДанныеПредставителяКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ПредставительКонтрагента, ""Должность, Фамилия, Имя, Отчество"");
		ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия), """",ДанныеПредставителяОрганизации.Фамилия
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя), """", "" ""+ ДанныеПредставителяОрганизации.Имя)
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество), """", "" ""+ ДанныеПредставителяОрганизации.Отчество));
		
		СтрЗаголовокТаблица = ""Мы, нижеподписавшиеся, "" + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
					""________________"", ДанныеПредставителяОрганизации.Должность) + "" "" + ПредставлениеОрганизации
					+ "" "" + ?(ФИОПредставителя <> """", ФИОПредставителя, ""_______________________"") + "", с одной стороны, ""
					+ ""и "" + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента) ИЛИ НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
					""________________"", ДанныеПредставителяКонтрагента.Должность)
					+ "" "" + ПредставлениеКонтрагента + "" "" + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
					""_______________________"", Шапка.ПредставительКонтрагента) + "", с другой стороны, ""
					+ ""составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:"";
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Шапка.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		//ОборотыДт = Шапка.Дебет;
		//ОборотыКт = Шапка.Кредит;
		//ОборотыДтКонтр = Шапка.ДебетК;
		//ОборотыКтКонтр = Шапка.КредитК;
		
		ОборотыДт = 0;
		ОборотыКт = 0;
		//ОборотыДтКонтр = 0;
		//ОборотыКтКонтр = 0;
		
		//ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""Договор"");
		//Пока ОбходПоДоговорам.Следующий() Цикл
		
		//ТЗ=ОбъектМетаданных.ПоДаннымОрганизации;
		//ТЗДоговоров=ОбъектМетаданных.ПоДаннымОрганизации;
		//ТЗДоговоров.Свернуть(""Договор"");
		//Для каждого ОбходПоДоговорам Из ТЗДоговоров Цикл
				
			
			
			//Если Шапка.РазбитьПоДоговорам Тогда
			//	//Выводим заголовок с договором
			//	ОбластьДоговор.Параметры.Договор = ОбходПоДоговорам.Договор;
			//	ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
			//	ТабличныйДокумент.Вывести(ОбластьДоговор);
			//	ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			//Иначе
			//	ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			//КонецЕсли;

			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			//Пока ОбходПоДокументам.Следующий() Цикл
			Для каждого ОбходПоДокументам Из ОбъектМетаданных.ПоДаннымОрганизации Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура(""ДатаДокумента, РегистраторПредставление, Регистратор, СуммаОборотДт, СуммаОборотКт"",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.Документ,ОбходПоДокументам.Дебет,ОбходПоДокументам.Кредит));
				КонецЕсли;
				
				//Если ОбходПоДокументам.ДатаК<>NULL Тогда
				//	СписокДокументовК.Добавить(новый структура(""ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр"",
				//	ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.ДебетК,ОбходПоДокументам.КредитК));
				//КонецЕсли;
			КонецЦикла;
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество() < СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура(""ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт"","""","""","""","""",""""));
					//СписокДокументов.Добавить(новый структура(""ДатаДокумента,Регистратор,СуммаОборотДт,СуммаОборотКт"","""","""","""","""",""""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество() > СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура(""ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр"","""","""","""",""""));
				КонецЦикла;
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);
				ОборотыДт=ОборотыДт+ОбластьОбороты.Параметры.СуммаОборотДт;
				ОборотыКт=ОборотыКт+ОбластьОбороты.Параметры.СуммаОборотКт;
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			

		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		//Если Шапка.СверкаСогласована тогда
		//	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
		//	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		//КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ОборотыДт -  ОборотыКт;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);

		НоваяСтрока = Объект.Реестр.Добавить();
		НоваяСтрока.Контрагент = ТекущийКонтрагент;
		НоваяСтрока.СуммаНачальныйОстатокДт = ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт;
		НоваяСтрока.СуммаНачальныйОстатокКт = ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт;
		НоваяСтрока.СуммаОборотДт = ОбластьОборотыИтог.Параметры.СуммаОборотДт;
		НоваяСтрока.СуммаОборотКт = ОбластьОборотыИтог.Параметры.СуммаОборотКт;
		НоваяСтрока.СуммаКонечныйОстатокДт = ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт;
		НоваяСтрока.СуммаКонечныйОстатокКт = ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт;

		//Если Шапка.СверкаСогласована тогда
		//	ОстатокНаКонецК = Шапка.ОстатокНаНачало - ОборотыДтКонтр +  ОборотыКтКонтр;
		//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
		//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		//КонецЕсли;
		
		
	
		// Результаты сверки
		Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
			РезультатыСверки = ""<не указана дата сверки>"";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
			РезультатыСверки = ""<не указан контрагент>"";
		Иначе
			РезультатыСверки = ""на "" + Формат(Шапка.ДатаОкончания, ""ДФ=dd.MM.yyyy"") + "" задолженность "";
				
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + ""в пользу "" + ПредставлениеОрганизации + "" "" 
									+ Формат(ОстатокНаКонец, ""ЧЦ=21; ЧДЦ=2"") + "" "" 
									+ строка(Шапка.ВалютаДокумента)
									+"" (""+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+"")"" ;
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + ""в пользу "" + ПредставлениеКонтрагента + "" "" 
									+ Формат(-ОстатокНаКонец, ""ЧЦ=21; ЧДЦ=2"") + "" "" 
									+ строка(Шапка.ВалютаДокумента)
									+"" (""+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+"")"" ;
			Иначе
				РезультатыСверки = РезультатыСверки + ""отсутствует."";
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Шапка.СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = ""По данным "" + ПредставлениеКонтрагента;
			
			Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
				РезультатыСверки = ""<не указана дата сверки>"";
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
				РезультатыСверки = ""<не указан контрагент>"";
			Иначе
				РезультатыСверки = ""на "" + Формат(Шапка.ДатаОкончания, ""ДФ=dd.MM.yyyy"") + "" задолженность "";
					
				Если ОстатокНаКонец > 0 Тогда
					РезультатыСверки = РезультатыСверки + ""в пользу "" + ПредставлениеОрганизации + "" "" 
										+ Формат(ОстатокНаКонец, ""ЧЦ=21; ЧДЦ=2"") + "" "" 
										+ строка(Шапка.ВалютаДокумента)
										+ "" (""+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+"")"" ;
				ИначеЕсли ОстатокНаКонец < 0 Тогда
					РезультатыСверки = РезультатыСверки + ""в пользу "" + ПредставлениеКонтрагента + "" "" 
										+ Формат(-ОстатокНаКонец, ""ЧЦ=21; ЧДЦ=2"") + "" "" 
										+ строка(Шапка.ВалютаДокумента)
										+"" (""+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+"")"" ;
				Иначе
					РезультатыСверки = РезультатыСверки + ""отсутствует."";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если Шапка.Расхождение <> 0 Тогда
				ИтогСверки = ""В результате сверки выявлено расхождение информации о состоянии расчетов в размере ""
							+ Формат(?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, ""ЧЦ=21; ЧДЦ=2"") 
							+ "" ""+ Строка(Шапка.ВалютаДокумента)
							+ "" (""+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
							?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, Шапка.ВалютаДокумента, Ложь)+"")"" ;
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки+Символы.ПС+"" "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		
		ОбластьПодвал.Параметры.Должность  = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
			""________________"", ДанныеПредставителяОрганизации.Должность);
		ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
			""________________"", ДанныеПредставителяКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = ""(""+?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации),
			""_______________________"",ДанныеПредставителяОрганизации.Представление)+"")"";
			
	//ДанныеПредставителяКонтрагента.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
	//	РеквизитыПредставителяКонтрагента.Фамилия,
	//	РеквизитыПредставителяКонтрагента.Имя,
	//	РеквизитыПредставителяКонтрагента.Отчество,
	//	Ложь);			
		ОбластьПодвал.Параметры.ФИОПредставителяК = ""(""+?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
			""_______________________"",ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеПредставителяКонтрагента.Фамилия, ДанныеПредставителяКонтрагента.Имя, ДанныеПредставителяКонтрагента.Отчество))+"")"";
		//ОбластьПодвал.Параметры.ФИОПредставителяК = ""(""+?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
		//	""_______________________"",ОбщегоНазначенияБПВызовСервера.ФамилияИнициалыФизЛица(
		//	ДанныеПредставителяКонтрагента.Фамилия + "" "" + ДанныеПредставителяКонтрагента.Имя + "" "" + ДанныеПредставителяКонтрагента.Отчество))+"")"";
			
			Области = Новый Массив;
			//Области.Добавить(ТабличныйДокумент);
			Области.Добавить(ОбластьКонОстатки);
			Области.Добавить(ОбластьПодвал);
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,Области) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();					
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКонОстатки);
			ТабличныйДокумент.Вывести(ОбластьПодвал);		  


		ТабличныйДокумент.ТолькоПросмотр = Истина;
		//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		//	НомерСтрокиНачало, ОбъектыПечати, Шапка.АктСверки);

	//КонецЦикла; // Пока Шапка.Следующий()

	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Функция ПечатьРеестра(ТабличныйДокумент)
	
	ОбъектМетаданных = РеквизитФормыВЗначение(""Объект"");
	Макет = ОбъектМетаданных.ПолучитьМакет(""АктСверки"");
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьЗаголовок    = Макет.ПолучитьОбласть(""ШапкаРеестра"");
	ОбластьСтрока    = Макет.ПолучитьОбласть(""СтрокаРеестра"");
	ОбластьИтогов    = Макет.ПолучитьОбласть(""ИтогиРеестра"");
	
	ОбластьЗаголовок.Параметры.ТекстЗаголовка=""Реестр актов за ""+ПредставлениеПериода(ОбъектМетаданных.ДатаНачала, КонецДня(ОбъектМетаданных.ДатаОкончания));
	ТекстЗаголовка2=""организация: ""+ОбъектМетаданных.Организация+""; контрагент:""+ОбъектМетаданных.Контрагент+?(ЗначениеЗаполнено(ОбъектМетаданных.ДоговорКонтрагента), ""; договор:""+ОбъектМетаданных.ДоговорКонтрагента, """")+""; счета:"";
	Первый=Истина;
	Для каждого ТекущаяСтрока Из ОбъектМетаданных.СписокСчетов Цикл
		ТекстЗаголовка2=ТекстЗаголовка2+?(ТекущаяСтрока.УчаствуетВРасчетах, ?(Первый, """", "", "")+ТекущаяСтрока.Счет, """");
		Первый=?(ТекущаяСтрока.УчаствуетВРасчетах, Ложь, Первый);
	КонецЦикла;
	
	ОбластьЗаголовок.Параметры.ТекстЗаголовка2=ТекстЗаголовка2;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Для каждого ТекущаяСтрока из Объект.Реестр.Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ТекущаяСтрока);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	ОбластьИтогов.Параметры.СуммаНачальныйОстатокДт=Объект.Реестр.Итог(""СуммаНачальныйОстатокДт"");
	ОбластьИтогов.Параметры.СуммаНачальныйОстатокКт=Объект.Реестр.Итог(""СуммаНачальныйОстатокКт"");
	ОбластьИтогов.Параметры.СуммаОборотДт=Объект.Реестр.Итог(""СуммаОборотДт"");
	ОбластьИтогов.Параметры.СуммаОборотКт=Объект.Реестр.Итог(""СуммаОборотКт"");
	ОбластьИтогов.Параметры.СуммаКонечныйОстатокДт=Объект.Реестр.Итог(""СуммаКонечныйОстатокДт"");
	ОбластьИтогов.Параметры.СуммаКонечныйОстатокКт=Объект.Реестр.Итог(""СуммаКонечныйОстатокКт"");
	ТабличныйДокумент.Вывести(ОбластьИтогов);
	
	Объект.Реестр.Очистить();
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура Сформировать(Команда)
	СписокКонтрагентов=ПолучитьСписокКонтрагентов();
	ТабличныйДокумент=Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб				= Истина;
	ТабличныйДокумент.РазмерКолонтитулаСверху	= 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабличныйДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати		= ""ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов"";
	ПервыйДокумент = Истина;

	НомерЭлементаСписка=1;
	Для каждого КонтрагентСЗ из СписокКонтрагентов Цикл
		ТекущийКонтрагент=КонтрагентСЗ.Значение;
		Объект.ПоДаннымОрганизации.Очистить();
		//ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
		ЗаполнитьПоДаннымБухгалтерскогоУчета();
		Если Объект.ПоДаннымОрганизации.Количество() ИЛИ Объект.ОстатокНаНачало ИЛИ БезПустых=Ложь  Тогда
			ТабличныйДокументРезультат=ПечатьАктаСверки(ПервыйДокумент);
			ПервыйДокумент = Ложь;
		КонецЕсли;
		Если СписокКонтрагентов.Количество()<>1 Тогда
			Состояние(""Формирую акты "", НомерЭлементаСписка/СписокКонтрагентов.Количество()*100);
		КонецЕсли;
		НомерЭлементаСписка=НомерЭлементаСписка+1;
	КонецЦикла;
	Если Объект.флВыводитьРеестр Тогда
		ТабличныйДокументРезультат=ПечатьРеестра(ТабличныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтрагентов()
	СписокКонтрагентов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если Объект.Контрагент.ЭтоГруппа Тогда
			КонтрагентыВыборка=Справочники.Контрагенты.ВыбратьИерархически(Объект.Контрагент,,,""Наименование Возр""); 
			Пока КонтрагентыВыборка.Следующий() Цикл
				Если не КонтрагентыВыборка.ЭтоГруппа Тогда
					СписокКонтрагентов.Добавить(КонтрагентыВыборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокКонтрагентов.Добавить(Объект.Контрагент);
		КонецЕсли;
	Иначе
		Сообщить(""не выбран контрагент"");
	КонецЕсли;
	СписокКонтрагентов.СортироватьПоЗначению();
	Возврат СписокКонтрагентов;
КонецФункции



Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли; 
	
    Возврат МетаданныеДокумента;
	
КонецФункции
	

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр(""ДатаНачала"",         СтруктураПараметров.ДатаНачалаВключая);
	Запрос.УстановитьПараметр(""ДатаОкончания"",      СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр(""Организация"",        СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр(""Контрагент"",         СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр(""Валюта"",             СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр(""ФильтрСписокСчетов"", СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр(""АналитикаРасчетов"",  СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр(""ДоговорКонтрагента"", СтруктураПараметров.ДоговорКонтрагента);
	
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговораКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)
	|	И &ДоговорКонтрагента <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПоДаннымОрганизации = Новый ТаблицаЗначений;
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Договор"",       Новый ОписаниеТипов(""СправочникСсылка.ДоговорыКонтрагентов""));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Дата"",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Документ"",      Документы.ТипВсеСсылки());
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Представление"", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Дебет"",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Кредит"",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""Валюта"",        Новый ОписаниеТипов(""СправочникСсылка.Валюты""));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить(""ВалютнаяСумма"", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	КэшМетаданных = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Договор            = Выборка.Договор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;

		Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
			//Если Истина Тогда
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + "" №"" + Символы.НПП + Выборка.Номер;
			Иначе
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + "" ("" + 
					?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), ""_______"", 
					Выборка.НомерВходящегоДокумента) + "" от "" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					""'  .  .    '"",
					Формат(Выборка.ДатаВходящегоДокумента, ""ДФ=dd.MM.yyyy"")) + "")"";
			КонецЕсли;	
		Иначе
			
			// Сформируем строку представления
			Представление = """";
			
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
					
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Представление = ""Курсовые разницы"";
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
					Представление = ""Санкции"";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(""Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы"") Тогда
					Представление = ""Суммовые разницы"";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(""Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ"") Тогда
					Представление = ""Курсовые разницы по расчетам в у.е."";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				
				Если Выборка.Дебет > 0 Тогда
					Представление = ""Возврат займа"";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = ""Займ"";
				Иначе
					Представление = ""Операции по займам"";
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
				
				Представление = ""Претензия"";
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
				
				Если (Выборка.Кредит >0) Тогда
					
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = ""Возврат средств"";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = ""Оплата"";
						
					Иначе
						Представление = ""Перевод средств"";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
						
						Представление = ""Оплата"";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = ""Возврат средств"";
						
					Иначе
						Представление = ""Перевод средств"";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип(""ДокументСсылка.КорректировкаПоступления"") Тогда
				Представление = ""Корректировка прихода"";
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип(""ДокументСсылка.КорректировкаРеализации"") Тогда
				Представление = ""Корректировка продажи"";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
				Представление = ""Продажа"";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				И НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				И (Выборка.Дебет > 0) Тогда
				Представление = ""Продажа"";
			ИначеЕсли (БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
				И (Выборка.Кредит <> 0) Тогда
				Представление = ""Приход"";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если ТипЗнч(Выборка.Документ) = Тип(""ДокументСсылка.РеализацияТоваровУслуг"") И Выборка.Дебет <> 0 Тогда
					Представление = ""Продажа"";
				ИначеЕсли (Выборка.Кредит <> 0) Тогда
					Представление = ""Оплата"";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = ""Принято"";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = ""Сторно: принято"";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = ""Передано"";
				Иначе
					Представление = ""Сторно: передано"";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				Если Представление = ""Продажа"" И ТипЗнч(Выборка.Документ) <> Тип(""ДокументСсылка.ОперацияБух"") Тогда
					Представление = Представление + "" ("" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Ложь) 
						+ "" от "" + Формат(Выборка.Дата, ""ДФ=dd.MM.yyyy"") + "")"";
				Иначе
					Представление = Представление + "" (""+Формат(Выборка.Дата, ""ДФ=dd.MM.yyyy"") + "")"";
				КонецЕсли;
			//ИначеЕсли (Выборка.НомерВходящегоДокумента = """" И Представление = ""Оплата"") 
			//	ИЛИ (Выборка.НомерВходящегоДокумента = """" И Представление = ""Перевод сред"") 
			//	Или  Найти(Представление, ""разницы"") > 0 Тогда
			//	Представление = Представление + "" ("" + Формат(Выборка.Дата, ""ДФ=dd.MM.yyyy"")+"")"";
			ИначеЕсли Выборка.НомерВходящегоДокумента = """" Или  Найти(Представление, ""разницы"") > 0 Тогда
				//Представление = Представление + "" ("" + Формат(Выборка.Дата, ""ДФ=dd.MM.yyyy"")+"")"";
				Представление = Представление + "" ("" + Формат(Выборка.Дата, ""ДФ=dd.MM.yyyy"")+"")"";
			Иначе
				Представление = Представление + "" ("" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),""_______"", 
					Выборка.НомерВходящегоДокумента) + "" от "" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					""'  .  .    '"", 
					Формат(Выборка.ДатаВходящегоДокумента, ""ДФ=dd.MM.yyyy""))+"")"";
			КонецЕсли;					  
			
			//НоваяСтрока.Представление = Представление +Символы.ПС+ МетаданныеДокумента+"" "";
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр(""ДатаНачала"", СтруктураПараметров.ДатаНачалаИсключая);
	
	Запрос.Текст = 
	?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаНачалаИсключая), 
	""ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец"", 
	
	""ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало,
	|	0 КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало"");
	
	Запрос.Текст = Запрос.Текст + 
	""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|"";
	
	Запрос.Текст = Запрос.Текст +
	""ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(ОстатокНаКонец)
	|ПО
	|	ОБЩИЕ"";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""ОБЩИЕ"");
	Выборка.Следующий();
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить(""ОстатокНаНачало"", Выборка.ОстатокНаНачало);
	ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	Если СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета 
		И НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов  Тогда
		
		ТаблицаПоДаннымОрганизации.Свернуть(""Дата,Документ,Представление,Договор,Валюта"", ""Дебет, Кредит, ВалютнаяСумма"");
		
		Для каждого СтрокаДвижений Из ТаблицаПоДаннымОрганизации Цикл
			Если СтрокаДвижений.ВалютнаяСумма >0 Тогда
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+"" (""+Формат(СтрокаДвижений.ВалютнаяСумма, ""ЧЦ=15; ЧДЦ=2"")+"" ""+строка(СтрокаДвижений.Валюта) +"")"";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 Тогда
				Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+"" (""+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, ""ЧЦ=15; ЧДЦ=2"")+"" ""+строка(СтрокаДвижений.Валюта) +"")"";
	
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		ТаблицаПоДаннымОрганизации.Свернуть(""Дата,Документ,Представление,Договор"",""Дебет, Кредит"");	
	КонецЕсли; 
	
	Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда	
		ТаблицаПоДаннымОрганизации.Свернуть(""Дата,Документ,Представление,Договор"",""Дебет, Кредит"");
	КонецЕсли;

	Если СтруктураПараметров.РазбитьПоДоговорам Тогда
		ТаблицаПоДаннымОрганизации.Сортировать(""Договор, Дата, Документ, Представление"", Новый СравнениеЗначений);
	Иначе
		ТаблицаПоДаннымОрганизации.Сортировать(""Дата, Документ, Представление, Договор"", Новый СравнениеЗначений);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанныхЗаполнения.Вставить(""ПоДаннымОрганизации"", ТаблицаПоДаннымОрганизации);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры
",
{4,17,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",9abd7faf-c90d-457f-8808-28637817f042}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,11,
{1,
{0,005fa4e6-11eb-4df0-8339-7680a5d2a9a8}
},
{1,
{0,0883cb86-d914-40fe-990f-e0d187171ad6}
},
{1,
{0,0bf27c27-4985-4e4f-96b7-d150713f0bf3}
},
{1,
{0,746ffaaa-4080-4bab-8ad5-4c9f6454aec3}
},
{1,
{0,7dcf8a37-8a6b-47b1-bd76-56a3854287a2}
},
{1,
{0,9540c435-3814-433e-8f19-4df3090dd0db}
},
{1,
{0,b3fd0578-463c-4919-ab45-52598835953b}
},
{1,
{0,c430b736-f488-40ee-9fc6-58b3fff6ce83}
},
{1,
{0,c7a76933-4fa7-4d32-9c50-46f2ebf89e94}
},
{1,
{0,d16c4da4-aeb7-400b-b4e9-924b2f3fa060}
},
{1,
{0,f03e9461-cc17-4ad3-ba33-8ff1b1513258}
}
},1,1,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ОстатокНаКонец",
{1,1,
{"ru","На конец"}
},
{"Pattern",
{"N",15,2,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"Расхождение",
{1,1,
{"ru","Расхождение с данными контрагента"}
},
{"Pattern",
{"N",15,2,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ОстатокНаНачалоКонтрагент",
{1,1,
{"ru","На начало"}
},
{"Pattern",
{"N",15,2,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ОстатокНаКонецКонтрагент",
{1,1,
{"ru","На конец"}
},
{"Pattern",
{"N",15,2,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"РасхождениеКонтрагент",
{1,1,
{"ru","Расхождение с данными организации"}
},
{"Pattern",
{"N",15,2,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"ТекущаяОрганизация",
{1,1,
{"ru","Текущая организация"}
},
{"Pattern",
{"#",c92a1124-c41e-42a4-bda7-3bbac9c6039e}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ПараметрыДоговора",
{1,1,
{"ru","Параметры текущего договора"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"ТекущийКонтрагент",
{1,1,
{"ru","Текущий контрагент"}
},
{"Pattern",
{"#",9f6206b2-1ed6-423c-9b08-fd4978930c49}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"ВалютаРегламентированногоУчета",
{1,1,
{"ru","Валюта регламентированного учета"}
},
{"Pattern",
{"#",655fd168-ab6a-4863-a2d5-401497aceec3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ТекущийПериод",
{1,1,
{"ru","Текущий период"}
},
{"Pattern",
{"#",2fdc88ec-7c9b-43cd-8ba5-873f043bdd88}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"ТекущийПредставительКонтрагента",
{1,1,
{"ru","Текущий представитель контрагента"}
},
{"Pattern",
{"#",7a9510f7-e984-4e0d-90e2-4c2636ab8e27}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"СостояниеДокумента",
{1,1,
{"ru","Состояние документа"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"АдресХранилища",
{1,1,
{"ru","Адрес хранилища"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ИдентификаторЗадания",
{1,1,
{"ru","Идентификатор задания"}
},
{"Pattern",
{"#",fc01b5df-97fe-449b-83d4-218a090e681e}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{16},0,"ТабличныйДокумент",
{1,1,
{"ru","Табличный документ"}
},
{"Pattern",
{"#",e603103e-a318-4edc-a014-b1c6cf94d49f}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{18},0,"БезПустых",
{1,1,
{"ru","Без пустых"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},0,2,"Объект.РазбитьПоДоговорам","Объект.РазбитьПоДоговорам",
{2,
{1},
{0,56011547-e386-4405-962d-f357799509ce}
},
{0},"Объект.ВыводитьПолныеНазванияДокументов","Объект.ВыводитьПолныеНазванияДокументов",
{2,
{1},
{0,168952f3-2da9-493e-8dcb-434be94e6c39}
},
{0},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCf0L7QlNCw0L3QvdGL0LzQntGA0LPQsNC90LjQ
t9Cw0YbQuNC40JTQvtCz0L7QstC+0YA8L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJ
CQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCf0L7QlNCw0L3QvdGL0LzQmtC+0L3RgtGA
0LDQs9C10L3RgtCw0JTQvtCz0L7QstC+0YA8L2ZpZWxkPg0KCQkJCTwvaXRlbT4N
CgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlw
ZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0i
ZGNzY29yOkZpZWxkIj7QntCx0YrQtdC60YIu0KDQsNC30LHQuNGC0YzQn9C+0JTQ
vtCz0L7QstC+0YDQsNC8PC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1
YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOmJv
b2xlYW4iPmZhbHNlPC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4N
CgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0
dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCS
0LjQtNC40LzQvtGB0YLRjDwvZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nv
cjp2YWx1ZSB4c2k6dHlwZT0ieHM6Ym9vbGVhbiI+ZmFsc2U8L2Rjc2Nvcjp2YWx1
ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNlPg0KCQkJPHBy
ZXNlbnRhdGlvbiB4c2k6dHlwZT0ieHM6c3RyaW5nIj7QodCx0YDQvtGBINCy0LjQ
tNC40LzQvtGB0YLQuCDQtNC+0LPQvtCy0L7RgNC+0LIg0LIg0YLQsNCx0LvQuNGH
0L3Ri9GFINGH0LDRgdGC0Y/RhTwvcHJlc2VudGF0aW9uPg0KCQk8L2l0ZW0+DQoJ
CTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxk
PtCf0L7QlNCw0L3QvdGL0LzQntGA0LPQsNC90LjQt9Cw0YbQuNC40JTQvtC60YPQ
vNC10L3RgjwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJ
CQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFy
aXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHR
itC10LrRgi7QktGL0LLQvtC00LjRgtGM0J/QvtC70L3Ri9C10J3QsNC30LLQsNC9
0LjRj9CU0L7QutGD0LzQtdC90YLQvtCyPC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNv
blR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8cmlnaHQgeHNpOnR5
cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4NCgkJCTwv
ZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0
eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJh
bWV0ZXI+0JLQuNC00LjQvNC+0YHRgtGMPC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJ
CQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBlPSJ4czpib29sZWFuIj5mYWxzZTwvZGNz
Y29yOnZhbHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2FwcGVhcmFuY2U+
DQoJCQk8cHJlc2VudGF0aW9uIHhzaTp0eXBlPSJ4czpzdHJpbmciPtCh0LHRgNC+
0YEg0LLQuNC00LjQvNC+0YHRgtC4INC00L7QutGD0LzQtdC90YLQsCDQsiDRgtCw
0LHQu9C40YbQtSAi0J/QviDQtNCw0L3QvdGL0Lwg0L7RgNCz0LDQvdC40LfQsNGG
0LjQuCI8L3ByZXNlbnRhdGlvbj4NCgkJPC9pdGVtPg0KCTwvY29uZGl0aW9uYWxB
cHBlYXJhbmNlPg0KPC9TZXR0aW5ncz4=}
},
{0,0},
{0,5,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаполнитьПоДаннымБухУчета",
{1,1,
{"ru","Заполнить по данным бухгалтерского учета"}
},
{1,1,
{"ru","Заполнить по данным бух учета"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаполнитьПоДаннымУчета",3,1,0,
{0,0},1,0,1,0,0},
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаполнитьПоДаннымОрганизации",
{1,1,
{"ru","Заполнить по данным организации"}
},
{1,1,
{"ru","Заполнить по данным организации"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации",3,1,0,
{0,0},1,0,1,0,0},
{8,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаполнитьСчетамиПоУмолчанию",
{1,1,
{"ru","Заполнить счетами по умолчанию"}
},
{1,1,
{"ru","Заполнить счетами по умолчанию"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаполнитьСчетамиПоУмолчанию",3,1,0,
{0,0},1,0,1,0,0},
{8,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыбратьПериод",
{1,1,
{"ru","Выбрать период"}
},
{1,1,
{"ru","Выбрать период"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыбратьПериод",3,0,0,
{0,0},1,0,1,0,0},
{8,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Сформировать",
{1,1,
{"ru","Сформировать"}
},
{1,1,
{"ru","Сформировать"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"Сформировать",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}